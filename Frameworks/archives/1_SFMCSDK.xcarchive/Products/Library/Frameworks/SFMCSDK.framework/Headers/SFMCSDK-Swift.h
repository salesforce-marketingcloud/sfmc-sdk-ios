#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef SFMCSDK_SWIFT_H
#define SFMCSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SFMCSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
enum SFMCSdkEventCategory : NSInteger;

SWIFT_PROTOCOL_NAMED("Event")
@protocol SFMCSdkEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@end


SWIFT_CLASS_NAMED("EngagementEvent")
@interface SFMCSdkEngagementEvent : NSObject <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SFMCSdkLineItem;

/// :nodoc:
SWIFT_CLASS_NAMED("CartEvent")
@interface SFMCSdkCartEvent : SFMCSdkEngagementEvent
@property (nonatomic, readonly, copy) NSArray<SFMCSdkLineItem *> * _Nonnull lineItems;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("AddToCartEvent")
@interface SFMCSdkAddToCartEvent : SFMCSdkCartEvent
- (nonnull instancetype)initWithLineItem:(SFMCSdkLineItem * _Nonnull)lineItem OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("Behavior")
@interface SFMCSdkBehavior : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Behavior notified when the application’s UI is no longer visible on the screen.
/// :nodoc:
SWIFT_CLASS_NAMED("AppBackgrounded")
@interface SFMCSdkAppBackgrounded : SFMCSdkBehavior
@end


/// Behavior notified when the application comes into the foreground and is “sticky”
/// :nodoc:
SWIFT_CLASS_NAMED("AppForegrounded")
@interface SFMCSdkAppForegrounded : SFMCSdkBehavior
@end


/// Behavior notified when the application’s version changes.
/// :nodoc:
SWIFT_CLASS_NAMED("AppVersionChanged")
@interface SFMCSdkAppVersionChanged : SFMCSdkBehavior
@end


///
SWIFT_CLASS_NAMED("AuthHeader")
@interface SFMCSdkAuthHeader : NSObject
/// Header key
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// Header value
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Initializer for the AuthHeader.
/// \param key header key
///
/// \param value header value
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSLock;

/// Protocol to adhere in order to provide an interface for extending modules to implement authentication.
SWIFT_PROTOCOL_NAMED("Authenticator")
@protocol SFMCSdkAuthenticator
/// Coordinates multiple threads of execution within the same app.
@property (nonatomic, readonly, strong) NSLock * _Nonnull lock;
/// Returns cached token header.
- (SFMCSdkAuthHeader * _Nullable)getCachedTokenHeader SWIFT_WARN_UNUSED_RESULT;
/// Refreshes auth token header.
- (SFMCSdkAuthHeader * _Nullable)refreshAuthTokenHeader SWIFT_WARN_UNUSED_RESULT;
/// Deletes cached token.
- (void)deleteCachedToken;
@end



/// This class allows modules to register observers to receive requested behavior event types.
/// Observers must adhere to the <a href="x-source-tag://BehaviorObserver">BehaviorObserver</a> protocol where the <a href="x-source-tag://BehaviorManager">BehaviorManager</a> will notify each observer via their respective <a href="x-source-tag://OnBehavior">onBehavior()</a> function. Behavior types that can be tracked include: (<a href="x-source-tag://BehaviorType">BehaviorType</a>)
SWIFT_CLASS_NAMED("BehaviorManager")
@interface SFMCSdkBehaviorManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to adhere to when creating an observer to listen to behavior events sent by the <a href="x-source-tag://BehaviorManager">BehaviorManager</a>
SWIFT_PROTOCOL_NAMED("BehaviorObserver")
@protocol SFMCSdkBehaviorObserver
/// Behavior types to observe.
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull behaviorTypesToObserve;
/// Action that needs to be taken on behavior event sent by the <a href="x-source-tag://BehaviorManager">BehaviorManager</a>
/// \param behavior instance of behavior adopting <a href="x-source-tag://Behavior">Behavior</a> protocol
///
- (void)onBehaviorWithBehavior:(SFMCSdkBehavior * _Nonnull)behavior;
@end

/// An enumeration of behaviors to track recognized by the SFMCSdk.
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkBehaviorType, "BehaviorType", open) {
/// App is forgrounded
  SFMCSdkBehaviorTypeAppForegrounded = 0,
/// App is backgrounded
  SFMCSdkBehaviorTypeAppBackgrounded = 1,
/// App version changed
  SFMCSdkBehaviorTypeAppVersionChanged = 2,
/// Screen entry
  SFMCSdkBehaviorTypeScreenEntry = 3,
};

enum SFMCSdkConsent : NSInteger;
@protocol SFMCSdkCoordinates;
@protocol SFMCSdkModuleIdentity;

SWIFT_PROTOCOL("_TtP7SFMCSDK12CdpInterface_")
@protocol CdpInterface
- (enum SFMCSdkConsent)getConsent SWIFT_WARN_UNUSED_RESULT;
- (void)setConsentWithConsent:(enum SFMCSdkConsent)consent;
- (void)setLocationWithCoordinates:(id <SFMCSdkCoordinates> _Nullable)coordinates expiresIn:(NSInteger)expiresIn;
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
@end

enum SFMCSdkModuleStatus : NSInteger;

SWIFT_CLASS_NAMED("CDP")
@interface SFMCSdkCDP : NSObject <CdpInterface>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (enum SFMCSdkModuleStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
- (enum SFMCSdkConsent)getConsent SWIFT_WARN_UNUSED_RESULT;
- (void)setConsentWithConsent:(enum SFMCSdkConsent)consent;
- (void)setLocationWithCoordinates:(id <SFMCSdkCoordinates> _Nullable)coordinates expiresIn:(NSInteger)expiresIn;
@end

@class SFMCSdkOrder;

/// :nodoc:
SWIFT_CLASS_NAMED("OrderEvent")
@interface SFMCSdkOrderEvent : SFMCSdkEngagementEvent
@property (nonatomic, readonly, strong) SFMCSdkOrder * _Nonnull order;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("CancelOrderEvent")
@interface SFMCSdkCancelOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("CatalogObject")
@interface SFMCSdkCatalogObject : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull relatedCatalogObjects;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type id:(NSString * _Nonnull)id attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes relatedCatalogObjects:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)relatedCatalogObjects OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("CatalogObjectEvent")
@interface SFMCSdkCatalogObjectEvent : SFMCSdkEngagementEvent
@property (nonatomic, readonly, strong) SFMCSdkCatalogObject * _Nonnull catalogObject;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("CommentCatalogObjectEvent")
@interface SFMCSdkCommentCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("Compatibility")
@interface SFMCSdkCompatibility : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SFMCSdkWrappedRequest;
@class SFMCSdkWrappedResponse;

/// This class is is a complete tuple-like wrapper that includes <a href="x-source-tag://WrappedRequest">WrappedRequest</a> and <a href="x-source-tag://WrappedResponse">WrappedResponse</a>
SWIFT_CLASS_NAMED("CompletedCall")
@interface SFMCSdkCompletedCall : NSObject
/// <a href="x-source-tag://WrappedRequest">WrappedRequest</a> instance
@property (nonatomic, readonly, strong) SFMCSdkWrappedRequest * _Nonnull wrappedRequest;
/// <a href="x-source-tag://WrappedResponse">WrappedResponse</a> instance
@property (nonatomic, readonly, strong) SFMCSdkWrappedResponse * _Nonnull wrappedResponse;
- (nonnull instancetype)init:(SFMCSdkWrappedRequest * _Nonnull)wrappedRequest :(SFMCSdkWrappedResponse * _Nonnull)wrappedResponse OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Config")
@interface SFMCSdkConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol SFMCSdkModuleConfig;
enum SFMCSdkOperationResult : NSInteger;

SWIFT_CLASS_NAMED("ConfigBuilder")
@interface SFMCSdkConfigBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Set Cdp Module
/// \param config Cdp Configuration
///
///
/// returns:
/// ConfigBuilder
- (SFMCSdkConfigBuilder * _Nonnull)setCdpWithConfig:(id <SFMCSdkModuleConfig> _Nonnull)config onCompletion:(void (^ _Nullable)(enum SFMCSdkOperationResult))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Set Push Module
/// \param config Push  Configuration
///
///
/// returns:
/// ConfigBuilder
- (SFMCSdkConfigBuilder * _Nonnull)setPushWithConfig:(id <SFMCSdkModuleConfig> _Nonnull)config onCompletion:(void (^ _Nullable)(enum SFMCSdkOperationResult))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Build SDK configuiration
///
/// returns:
/// Config for the SDK
- (SFMCSdkConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// An enumeration of available consent options.
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkConsent, "Consent", open) {
/// Opt in for submitting data
  SFMCSdkConsentOptIn = 0,
/// Opt out  of submitting data
  SFMCSdkConsentOptOut = 1,
/// Pending consent for submitting data  (default option)
  SFMCSdkConsentPending = 2,
/// None (Objc compatibility optional)
  SFMCSdkConsentNone = 3,
};


SWIFT_PROTOCOL_NAMED("Coordinates")
@protocol SFMCSdkCoordinates
@property (nonatomic, readonly) double latitude;
@property (nonatomic, readonly) double longitude;
@end


SWIFT_CLASS_NAMED("CustomEvent")
@interface SFMCSdkCustomEvent : NSObject <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nullable instancetype)initWithName:(NSString * _Nonnull)name attributes:(NSDictionary<NSString *, id> * _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSDKDataMergePolicy, "DataMergePolicy", open) {
  SFMCSDKDataMergePolicyNone = 0,
  SFMCSDKDataMergePolicyAuto = 1,
  SFMCSDKDataMergePolicyManual = 2,
};


/// :nodoc:
SWIFT_CLASS_NAMED("DeliverOrderEvent")
@interface SFMCSdkDeliverOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// Encryption Manager class is used for creating a unique encryption key (AES 256 encryption) for modules.
SWIFT_CLASS_NAMED("EncryptionManager")
@interface SFMCSdkEncryptionManager : NSObject
/// Encrypts a String value using AES 256
/// \param string String to be encrypted with unicode String encoding
///
///
/// returns:
/// The encrypted String data. Returns nil if the data is unable to be encrypted
- (NSData * _Nullable)encryptWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Decrypts data of a String and returns the String representation of the data
/// \param stringData The AES 256 encrypted data representation of a String
///
///
/// returns:
/// The String value associated with the encrypted data provided. Returns nil if the data is unable to be encrypted
- (NSString * _Nullable)decryptWithStringData:(NSData * _Nonnull)stringData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



enum SFMCSdkMessageProducer : NSInteger;
enum SFMCSdkModuleName : NSInteger;
@protocol Subscriber;

SWIFT_CLASS_NAMED("EventBus")
@interface SFMCSdkEventBus : NSObject
+ (void)publishWithProducer:(enum SFMCSdkMessageProducer)producer event:(id <SFMCSdkEvent> _Nonnull)event;
+ (void)publishToTarget:(enum SFMCSdkModuleName)target producer:(enum SFMCSdkMessageProducer)producer event:(id <SFMCSdkEvent> _Nonnull)event;
+ (void)subscribeWithSubscriber:(id <Subscriber> _Nonnull)subscriber;
+ (void)unsubscribeWithSubscriber:(id <Subscriber> _Nonnull)subscriber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkEventCategory, "EventCategory", open) {
  SFMCSdkEventCategoryEngagement = 0,
  SFMCSdkEventCategoryIdentity = 1,
  SFMCSdkEventCategorySystem = 2,
};


/// :nodoc:
SWIFT_CLASS_NAMED("ExchangeOrderEvent")
@interface SFMCSdkExchangeOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("FakeEvent")
@interface SFMCSdkFakeEvent : NSObject <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nullable instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("FavoriteCatalogObjectEvent")
@interface SFMCSdkFavoriteCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("IDENTITY")
@interface SFMCSdkIDENTITY : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
/// Set profile ID to all operational, subscribed modules.
/// \param profile profile to set
///
- (void)setProfileId:(NSString * _Nonnull)profile;
- (void)setProfileIdWithProfile:(NSString * _Nonnull)profile rawModules:(NSArray<NSNumber *> * _Nonnull)rawModules;
- (void)setProfileIdWithProfiles:(NSDictionary<NSNumber *, NSString *> * _Nonnull)profiles;
/// Clear a profile attribute
/// \param key to clear value for
///
- (void)clearProfileAttributeWithKey:(NSString * _Nonnull)key;
/// Clear profile attributes
/// \param keys to clear values for
///
- (void)clearProfileAttributesWithKeys:(NSArray<NSString *> * _Nonnull)keys;
/// Set Profile Attributes to all operational, subscribed modules.
/// \param attributes attributes to set
///
- (void)setProfileAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (void)setProfileAttributesNamedWithAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes rawModules:(NSArray<NSNumber *> * _Nonnull)rawModules;
- (void)setProfileAttributesNamed:(NSDictionary<NSNumber *, NSDictionary<NSString *, NSString *> *> * _Nonnull)attributes;
@end


SWIFT_PROTOCOL_NAMED("IdentityEventProtocol")
@protocol SFMCSdkIdentityEventProtocol <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable profileId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable profileAttributes;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("IdentityEvent")
@interface SFMCSdkIdentityEvent : NSObject <SFMCSdkIdentityEventProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSString * _Nullable profileId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable profileAttributes;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)initWithProfileId:(NSString * _Nonnull)profileId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithProfileAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)profileAttributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("InAppMessageEventDelegate")
@protocol SFMCSdkInAppMessageEventDelegate
@optional
- (BOOL)sfmc_shouldShowInAppMessage:(NSDictionary * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (void)sfmc_didShowInAppMessage:(NSDictionary * _Nonnull)message;
- (void)sfmc_didCloseInAppMessage:(NSDictionary * _Nonnull)message;
@end


SWIFT_PROTOCOL_NAMED("InboxMessagesDataSource")
@protocol SFMCSdkInboxMessagesDataSource <UITableViewDataSource>
@end


SWIFT_PROTOCOL_NAMED("InboxMessagesDelegate")
@protocol SFMCSdkInboxMessagesDelegate <UITableViewDelegate>
@end

@class NSDecimalNumber;

/// :nodoc:
SWIFT_CLASS_NAMED("LineItem")
@interface SFMCSdkLineItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull catalogObjectType;
@property (nonatomic, readonly, copy) NSString * _Nonnull catalogObjectId;
@property (nonatomic, readonly) NSInteger quantity;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable price;
@property (nonatomic, readonly, copy) NSString * _Nullable currency;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)initWithCatalogObjectType:(NSString * _Nonnull)catalogObjectType catalogObjectId:(NSString * _Nonnull)catalogObjectId quantity:(NSInteger)quantity price:(NSDecimalNumber * _Nullable)price currency:(NSString * _Nullable)currency attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("LocationDelegate")
@protocol SFMCSdkLocationDelegate
- (BOOL)sfmc_shouldShowLocationMessage:(NSDictionary * _Nonnull)message forRegion:(NSDictionary * _Nonnull)region SWIFT_WARN_UNUSED_RESULT;
@end

/// Log Level detail definition
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkLogLevel, "LogLevel", open) {
/// Debug log level
  SFMCSdkLogLevelDebug = 0,
/// Warn log level
  SFMCSdkLogLevelWarn = 1,
/// Error log level
  SFMCSdkLogLevelError = 2,
/// Fault log level
  SFMCSdkLogLevelFault = 3,
};

enum SFMCSdkLoggerCategory : NSInteger;

/// Defines how logs are being outputted.
SWIFT_CLASS_NAMED("LogOutputter")
@interface SFMCSdkLogOutputter : NSObject
/// Captures logs using the native unified logging system (log level must be defined as OSLogType)
/// \param level (<a href="x-source-tag://LogLevel">LogLevel</a>) instance to define log level detail
///
/// \param subsystem Subsystem identifying  a specific subsystem of app
///
/// \param category System-defined category
///
/// \param message Message
///
- (void)outWithLevel:(enum SFMCSdkLogLevel)level subsystem:(NSString * _Nonnull)subsystem category:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_PROTOCOL("_TtP7SFMCSDK6Logger_")
@protocol Logger
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull redactedValues;
@end

/// Logger Category definition
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkLoggerCategory, "LoggerCategory", open) {
  SFMCSdkLoggerCategoryAuth = 0,
  SFMCSdkLoggerCategoryBehavior = 1,
  SFMCSdkLoggerCategoryEncryption = 2,
  SFMCSdkLoggerCategoryEventBus = 3,
  SFMCSdkLoggerCategoryNetwork = 4,
  SFMCSdkLoggerCategoryModule = 5,
  SFMCSdkLoggerCategorySdk = 6,
  SFMCSdkLoggerCategoryStorage = 7,
  SFMCSdkLoggerCategoryConsent = 8,
  SFMCSdkLoggerCategoryCoredata = 9,
  SFMCSdkLoggerCategoryDatabase = 10,
  SFMCSdkLoggerCategoryEvent = 11,
  SFMCSdkLoggerCategoryIdentity = 12,
  SFMCSdkLoggerCategoryInterface = 13,
  SFMCSdkLoggerCategoryLocation = 14,
  SFMCSdkLoggerCategorySession = 15,
  SFMCSdkLoggerCategoryUtil = 16,
};


SWIFT_CLASS_NAMED("Message")
@interface SFMCSdkMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkMessageProducer, "MessageProducer", open) {
  SFMCSdkMessageProducerCdp = 0,
  SFMCSdkMessageProducerPush = 1,
  SFMCSdkMessageProducerSdk = 2,
};


/// SFMCSdk Module Configuration protocol that all registered modules adopt as configuration.
SWIFT_PROTOCOL_NAMED("ModuleConfig")
@protocol SFMCSdkModuleConfig
/// Module name
@property (nonatomic, readonly) enum SFMCSdkModuleName name;
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Enable or disbale screen tracking
@property (nonatomic, readonly) BOOL trackScreens;
@end


SWIFT_PROTOCOL_NAMED("ModuleIdentity")
@protocol SFMCSdkModuleIdentity
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationId;
@property (nonatomic, readonly, copy) NSString * _Nullable profileId;
@property (nonatomic, readonly, copy) NSString * _Nullable installationId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable customProperties;
- (NSString * _Nullable)customPropertiesToJson SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ModuleLogger")
@interface SFMCSdkModuleLogger : NSObject <Logger>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull redactedValues;
- (nonnull instancetype)initWithModule:(enum SFMCSdkModuleName)module_ redactedValues:(NSArray<NSString *> * _Nonnull)redactedValues OBJC_DESIGNATED_INITIALIZER;
- (void)setWithRedactedValues:(NSArray<NSString *> * _Nonnull)redactedValues;
- (void)debugWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)warningWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)errorWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)faultWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkModuleName, "ModuleName", open) {
  SFMCSdkModuleNameCdp = 0,
  SFMCSdkModuleNamePush = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkModuleStatus, "ModuleStatus", open) {
  SFMCSdkModuleStatusCancelled = 0,
  SFMCSdkModuleStatusDisabled = 1,
  SFMCSdkModuleStatusFailed = 2,
  SFMCSdkModuleStatusInactive = 3,
  SFMCSdkModuleStatusInitializing = 4,
  SFMCSdkModuleStatusOperational = 5,
};


@class SFMCSdkSecurePrefs;

/// This class is a helper for making synchronous and asynchronous network calls with an optional authenticator.
SWIFT_CLASS_NAMED("NetworkManager")
@interface SFMCSdkNetworkManager : NSObject
- (nonnull instancetype)initWithNetworkPreferences:(SFMCSdkSecurePrefs * _Nonnull)networkPreferences authenticator:(id <SFMCSdkAuthenticator> _Nullable)authenticator OBJC_DESIGNATED_INITIALIZER;
/// Executes synchronous network call.
/// \param wrappedRequest instance of <a href="x-source-tag://WrappedRequest">WrappedRequest</a>
///
///
/// returns:
/// instance of <a href="x-source-tag://CompletedCall">CompletedCall</a> that contains both the request and the response
- (SFMCSdkCompletedCall * _Nonnull)executeSync:(SFMCSdkWrappedRequest * _Nonnull)wrappedRequest SWIFT_WARN_UNUSED_RESULT;
/// Executes aynchronous network call.
/// \param wrappedRequest instance of <a href="x-source-tag://WrappedRequest">WrappedRequest</a>
///
/// \param completionHandler callback on response
///
- (void)executeAsync:(SFMCSdkWrappedRequest * _Nonnull)wrappedRequest completionHandler:(void (^ _Nonnull)(SFMCSdkCompletedCall * _Nonnull))completionHandler;
/// Temporarily blocks retries of given request. Waiting time is stored in the network preferences under the requests name key.
/// \param requestName Name of the request
///
///
/// returns:
/// Bool
- (BOOL)isBlockedByRetryAfter:(NSString * _Nonnull)requestName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumaration of Network Manager Error Options.
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkNetworkManagerError, "NetworkManagerError", open) {
/// Fetching token failed
  SFMCSdkNetworkManagerErrorTokenFetchFailed = 0,
/// Refreshing token failed
  SFMCSdkNetworkManagerErrorTokenRefreshFailed = 1,
/// Too Many requests
  SFMCSdkNetworkManagerErrorTooManyRequests = 2,
/// Request is already in flight
  SFMCSdkNetworkManagerErrorRequestAlreadyInFlight = 3,
};
static NSString * _Nonnull const SFMCSdkNetworkManagerErrorDomain = @"SFMCSDK.NetworkManagerError";

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkOperationResult, "OperationResult", open) {
  SFMCSdkOperationResultCancelled = 0,
  SFMCSdkOperationResultError = 1,
  SFMCSdkOperationResultSuccess = 2,
  SFMCSdkOperationResultTimeout = 3,
};


/// :nodoc:
SWIFT_CLASS_NAMED("Order")
@interface SFMCSdkOrder : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSArray<SFMCSdkLineItem *> * _Nonnull lineItems;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable totalValue;
@property (nonatomic, readonly, copy) NSString * _Nullable currency;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id lineItems:(NSArray<SFMCSdkLineItem *> * _Nonnull)lineItems totalValue:(NSDecimalNumber * _Nullable)totalValue currency:(NSString * _Nullable)currency attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UNNotificationRequest;
@class UITableView;
@class NSNumber;
@class CLRegion;
@protocol SFMCSdkURLHandlingDelegate;

SWIFT_PROTOCOL("_TtP7SFMCSDK13PushInterface_")
@protocol PushInterface
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
- (void)tearDown;
- (NSString * _Nullable)contactKey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
- (NSSet * _Nullable)addTags:(NSArray * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
- (NSSet * _Nullable)tags SWIFT_WARN_UNUSED_RESULT;
- (void)setDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)setDebugLoggingEnabled:(BOOL)enabled;
- (NSDictionary * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)setNotificationRequest:(UNNotificationRequest * _Nonnull)request;
- (UNNotificationRequest * _Nullable)notificationRequest SWIFT_WARN_UNUSED_RESULT;
- (void)setNotificationUserInfo:(NSDictionary * _Nonnull)userInfo;
- (NSDictionary * _Nonnull)notificationUserInfo SWIFT_WARN_UNUSED_RESULT;
- (void)setPushEnabled:(BOOL)pushEnabled;
- (BOOL)pushEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)refreshWithFetchCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (void)setRegistrationCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull))registrationCallback;
- (void)unsetRegistrationCallback;
- (BOOL)setSignedString:(NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
- (void)setEventDelegate:(id <SFMCSdkInAppMessageEventDelegate> _Nullable)delegate;
- (NSString * _Nullable)messageIdForMessage:(NSDictionary * _Nonnull)forMessage SWIFT_WARN_UNUSED_RESULT;
- (void)showInAppMessageWithMessageId:(NSString * _Nonnull)messageId;
- (BOOL)setInAppMessageWithFontName:(NSString * _Nullable)fontName SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getAllMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getUnreadMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getReadMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getDeletedMessages SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getAllMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getUnreadMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getReadMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getDeletedMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageRead:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageDeleted:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageWithIdReadWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageWithIdDeletedWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markAllMessagesRead SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markAllMessagesDeleted SWIFT_WARN_UNUSED_RESULT;
- (BOOL)refreshMessages SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkInboxMessagesDataSource> _Nullable)inboxMessagesTableViewDataSourceForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkInboxMessagesDelegate> _Nullable)inboxMessagesTableViewDelegateForTableView:(UITableView * _Nonnull)tableView dataSource:(id <SFMCSdkInboxMessagesDataSource> _Nonnull)dataSource SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setPiIdentifier:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)piIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)trackMessageOpened:(NSDictionary * _Nonnull)inboxMessage;
- (void)trackPageViewWithUrl:(NSString * _Nonnull)url title:(NSString * _Nullable)title item:(NSString * _Nullable)item search:(NSString * _Nullable)search;
- (void)trackCartContents:(NSDictionary * _Nonnull)cartDictionary;
- (void)trackCartConversion:(NSDictionary * _Nonnull)orderDictionary;
- (NSDictionary * _Nullable)cartItemDictionaryWithPrice:(NSNumber * _Nonnull)price quantity:(NSNumber * _Nonnull)quantity item:(NSString * _Nonnull)item uniqueId:(NSString * _Nullable)uniqueId SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nullable)cartDictionaryWithCartItem:(NSArray * _Nonnull)cartItem SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nullable)orderDictionaryWithOrderNumber:(NSString * _Nonnull)orderNumber shipping:(NSNumber * _Nonnull)shipping discount:(NSNumber * _Nonnull)discount cart:(NSDictionary * _Nonnull)cart SWIFT_WARN_UNUSED_RESULT;
- (void)setLocationDelegate:(id <SFMCSdkLocationDelegate> _Nullable)delegate;
- (CLRegion * _Nullable)regionFromDictionary:(NSDictionary * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)locationEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)startWatchingLocation;
- (void)stopWatchingLocation;
- (BOOL)watchingLocation SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nullable)lastKnownLocation SWIFT_WARN_UNUSED_RESULT;
- (void)setURLHandlingDelegate:(id <SFMCSdkURLHandlingDelegate> _Nullable)delegate;
- (BOOL)resetDataPolicy SWIFT_WARN_UNUSED_RESULT;
@end


/// Push module
SWIFT_CLASS_NAMED("PUSH")
@interface SFMCSdkPUSH : NSObject <PushInterface>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (enum SFMCSdkModuleStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
- (void)tearDown SWIFT_DEPRECATED_MSG("The SFMCSdk takes care of tear downs during initializations, making this method unnecessary. Its usage should be avoided to prevent race conditions.");
- (NSString * _Nullable)contactKey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
- (NSSet * _Nullable)addTags:(NSArray * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
- (NSSet * _Nullable)tags SWIFT_WARN_UNUSED_RESULT;
- (void)setDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)setDebugLoggingEnabled:(BOOL)enabled;
- (NSDictionary * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)setNotificationRequest:(UNNotificationRequest * _Nonnull)request;
- (UNNotificationRequest * _Nullable)notificationRequest SWIFT_WARN_UNUSED_RESULT;
- (void)setNotificationUserInfo:(NSDictionary * _Nonnull)userInfo;
- (NSDictionary * _Nonnull)notificationUserInfo SWIFT_WARN_UNUSED_RESULT;
- (void)setPushEnabled:(BOOL)pushEnabled;
- (BOOL)pushEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)refreshWithFetchCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Register a callback that will be notified when Registration related events happen
/// @param registrationCallback   closure to be provided when registration event occurs
- (void)setRegistrationCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull))registrationCallback;
/// Removes the registration callback
- (void)unsetRegistrationCallback;
- (BOOL)setSignedString:(NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
- (void)setEventDelegate:(id <SFMCSdkInAppMessageEventDelegate> _Nullable)delegate;
- (NSString * _Nullable)messageIdForMessage:(NSDictionary * _Nonnull)forMessage SWIFT_WARN_UNUSED_RESULT;
- (void)showInAppMessageWithMessageId:(NSString * _Nonnull)messageId;
- (BOOL)setInAppMessageWithFontName:(NSString * _Nullable)fontName SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getAllMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getUnreadMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getReadMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getDeletedMessages SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getAllMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getUnreadMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getReadMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getDeletedMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageRead:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageDeleted:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageWithIdReadWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageWithIdDeletedWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markAllMessagesRead SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markAllMessagesDeleted SWIFT_WARN_UNUSED_RESULT;
- (BOOL)refreshMessages SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkInboxMessagesDataSource> _Nullable)inboxMessagesTableViewDataSourceForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkInboxMessagesDelegate> _Nullable)inboxMessagesTableViewDelegateForTableView:(UITableView * _Nonnull)tableView dataSource:(id <SFMCSdkInboxMessagesDataSource> _Nonnull)dataSource SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setPiIdentifier:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)piIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)trackMessageOpened:(NSDictionary * _Nonnull)inboxMessage;
- (void)trackPageViewWithUrl:(NSString * _Nonnull)url title:(NSString * _Nullable)title item:(NSString * _Nullable)item search:(NSString * _Nullable)search;
/// :nodoc:
- (void)trackCartContents:(NSDictionary * _Nonnull)cartDictionary;
/// :nodoc:
- (void)trackCartConversion:(NSDictionary * _Nonnull)orderDictionary;
/// :nodoc:
- (NSDictionary * _Nullable)cartItemDictionaryWithPrice:(NSNumber * _Nonnull)price quantity:(NSNumber * _Nonnull)quantity item:(NSString * _Nonnull)item uniqueId:(NSString * _Nullable)uniqueId SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nullable)cartDictionaryWithCartItem:(NSArray * _Nonnull)cartItem SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nullable)orderDictionaryWithOrderNumber:(NSString * _Nonnull)orderNumber shipping:(NSNumber * _Nonnull)shipping discount:(NSNumber * _Nonnull)discount cart:(NSDictionary * _Nonnull)cart SWIFT_WARN_UNUSED_RESULT;
- (void)setLocationDelegate:(id <SFMCSdkLocationDelegate> _Nullable)delegate;
- (CLRegion * _Nullable)regionFromDictionary:(NSDictionary * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)locationEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)startWatchingLocation;
- (void)stopWatchingLocation;
- (BOOL)watchingLocation SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nullable)lastKnownLocation SWIFT_WARN_UNUSED_RESULT;
- (void)setURLHandlingDelegate:(id <SFMCSdkURLHandlingDelegate> _Nullable)delegate;
- (BOOL)resetDataPolicy SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("PreorderEvent")
@interface SFMCSdkPreorderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("PurchaseOrderEvent")
@interface SFMCSdkPurchaseOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("QuickViewCatalogObjectEvent")
@interface SFMCSdkQuickViewCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("RemoveFromCartEvent")
@interface SFMCSdkRemoveFromCartEvent : SFMCSdkCartEvent
- (nonnull instancetype)initWithLineItem:(SFMCSdkLineItem * _Nonnull)lineItem OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReplaceCartEvent")
@interface SFMCSdkReplaceCartEvent : SFMCSdkCartEvent
- (nonnull instancetype)initWithLineItems:(NSArray<SFMCSdkLineItem *> * _Nonnull)lineItems OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReturnOrderEvent")
@interface SFMCSdkReturnOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReviewCatalogObjectEvent")
@interface SFMCSdkReviewCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end

@class SFMCSdkComponents;

SWIFT_PROTOCOL("_TtP7SFMCSDK10SFMCModule_")
@protocol SFMCModule
@property (nonatomic, readonly) enum SFMCSdkModuleName name;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull moduleVersion;)
+ (NSString * _Nonnull)moduleVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable stateProperties;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)stateProperties SWIFT_WARN_UNUSED_RESULT;
+ (void)setStateProperties:(NSDictionary<NSString *, NSString *> * _Nullable)newValue;
+ (id <SFMCModule> _Nullable)initModuleWithConfig:(id <SFMCSdkModuleConfig> _Nonnull)config components:(SFMCSdkComponents * _Nonnull)components SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("SFMCSdk")
@interface SFMCSdk : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SFMCSdkCDP * _Nonnull cdp;)
+ (SFMCSdkCDP * _Nonnull)cdp SWIFT_WARN_UNUSED_RESULT;
+ (void)setCdp:(SFMCSdkCDP * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SFMCSdkPUSH * _Nonnull mp;)
+ (SFMCSdkPUSH * _Nonnull)mp SWIFT_WARN_UNUSED_RESULT;
+ (void)setMp:(SFMCSdkPUSH * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SFMCSdkIDENTITY * _Nonnull identity;)
+ (SFMCSdkIDENTITY * _Nonnull)identity SWIFT_WARN_UNUSED_RESULT;
+ (void)setIdentity:(SFMCSdkIDENTITY * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setSdkVersion:(NSString * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)initializeSdk:(SFMCSdkConfig * _Nonnull)configuration;
+ (void)trackWithEvent:(id <SFMCSdkEvent> _Nonnull)event;
+ (NSString * _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerWithLogLevel:(enum SFMCSdkLogLevel)logLevel logOutputter:(SFMCSdkLogOutputter * _Nonnull)logOutputter;
+ (void)setAutoMergePolicyOnCompletion:(void (^ _Nonnull)(BOOL))onCompletion;
+ (void)setManualMergePolicyWithHandler:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSDictionary * _Nonnull))handler;
+ (enum SFMCSDKDataMergePolicy)getDataMergePolicy SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)resetDataPolicyWithAppId:(NSString * _Nonnull)appId SWIFT_WARN_UNUSED_RESULT;
+ (void (^ _Nullable)(BOOL))getAutoDataPolicyCallBack SWIFT_WARN_UNUSED_RESULT;
+ (void (^ _Nullable)(NSDictionary * _Nonnull, NSDictionary * _Nonnull))getManualDataPolicyCallBack SWIFT_WARN_UNUSED_RESULT;
+ (void)clearLoggerFilters;
/// Provides a way to set/override the accessibility attribute for Keychain
/// \param accessibleAttribute CFTypeRef which has any one of below values
/// kSecAttrAccessibleWhenUnlocked
/// kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly
/// kSecAttrAccessibleWhenUnlockedThisDeviceOnly
/// kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
/// kSecAttrAccessibleAlwaysThisDeviceOnly
///
+ (void)setKeychainAccessibleAttributeWithAccessibleAttribute:(CFTypeRef _Nullable)accessibleAttribute;
/// Returns accessible attribute set by the SDK or overridden value by the consuming application
///
/// returns:
/// CFTypeRef which has any one of below values
/// kSecAttrAccessibleWhenUnlocked
/// kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly
/// kSecAttrAccessibleWhenUnlockedThisDeviceOnly
/// kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
/// kSecAttrAccessibleAlwaysThisDeviceOnly
+ (CFTypeRef _Nullable)keychainAccessibleAttribute SWIFT_WARN_UNUSED_RESULT;
/// Sets whether or not keychain access errors cause a fatal exception.
/// \param errorsAreFatal Whether keychain access errors should be fatal. 
///
+ (void)setKeychainAccessErrorsAreFatalWithErrorsAreFatal:(BOOL)errorsAreFatal;
///
/// returns:
/// Bool Indicates whether keychain access errors cause a fatal exception.  Default is YES.
+ (BOOL)keychainAccessErrorsAreFatal SWIFT_WARN_UNUSED_RESULT;
/// Provides a way to set/override the  Protection level for File system
/// \param fileProtectionType FileProtectionType which has any one of the below values
/// NSFileProtectionComplete
/// NSFileProtectionCompleteUnlessOpen
/// NSFileProtectionCompleteUntilFirstUserAuthentication
/// NSFileProtectionNone
///
+ (void)setFileProtectionTypeWithFileProtectionType:(NSFileProtectionType _Nullable)fileProtectionType;
/// Returns File protection type set by the SDK or overridden value by the consuming application
///
/// returns:
/// FileProtectionType which has any one of below values
/// NSFileProtectionComplete
/// NSFileProtectionCompleteUnlessOpen
/// NSFileProtectionCompleteUntilFirstUserAuthentication
/// NSFileProtectionNone
+ (NSFileProtectionType _Nullable)fileProtectionType SWIFT_WARN_UNUSED_RESULT;
+ (void)tearDownModuleWithName:(enum SFMCSdkModuleName)name SWIFT_DEPRECATED_MSG("The SFMCSdk takes care of tear downs during initializations, making this method unnecessary. Its usage should be avoided to prevent race conditions.");
@end

@class SFMCSdkStorageManager;

/// This class provides helper components for [SFMCSdkModule] subclasses
SWIFT_CLASS_NAMED("SFMCSdkComponents")
@interface SFMCSdkComponents : NSObject
/// <a href="x-source-tag://EncryptionManager">EncryptionManager</a> instance
@property (nonatomic, readonly, strong) SFMCSdkEncryptionManager * _Nonnull encryptionManager;
/// <a href="x-source-tag://StorageManager">StorageManager</a> instance
@property (nonatomic, readonly, strong) SFMCSdkStorageManager * _Nonnull storageManager;
/// <a href="x-source-tag://BehaviorManager">BehaviorManager</a> instance
@property (nonatomic, readonly, strong) SFMCSdkBehaviorManager * _Nonnull behaviorManager;
/// Creates network manager.
/// \param authenticator instance of (<a href="x-source-tag://Authenticator">Authenticator</a>)
///
///
/// returns:
/// instance of (<a href="x-source-tag://NetworkManager">NetworkManager</a>)
- (SFMCSdkNetworkManager * _Nonnull)createNetworkManagerWithAuthenticator:(id <SFMCSdkAuthenticator> _Nullable)authenticator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7SFMCSDK13SFMCSdkLogger")
@interface SFMCSdkLogger : NSObject <Logger>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFMCSdkLogger * _Nonnull shared;)
+ (SFMCSdkLogger * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull redactedValues;
- (enum SFMCSdkLogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
- (void)debugWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)warningWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)errorWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)faultWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Behavior notified as the user traverses through the application’s Activities.
/// :nodoc:
SWIFT_CLASS_NAMED("ScreenEntry")
@interface SFMCSdkScreenEntry : SFMCSdkBehavior
@end


/// This class provides helper methods for storage.
SWIFT_CLASS_NAMED("SecurePrefs")
@interface SFMCSdkSecurePrefs : NSObject
/// Stores a String value with the provided key. Key and value are both encrypted.
/// \param value The String value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setString:(NSString * _Nonnull)value for:(NSString * _Nonnull)key;
/// Stores a Int value with the provided key. Key and value are both encrypted.
/// \param value The Int value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setInt:(NSInteger)value for:(NSString * _Nonnull)key;
/// Stores a Bool value with the provided key. Key and value are both encrypted.
/// \param value The Bool value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setBool:(BOOL)value for:(NSString * _Nonnull)key;
/// Sets a Float value in the keychain with the provided key. Key and value are both encrypted.
/// \param value The Float value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setFloat:(float)value for:(NSString * _Nonnull)key;
/// Sets a Double value in the keychain with the provided key. Key and value are both encrypted.
/// \param value The Double value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setDouble:(double)value for:(NSString * _Nonnull)key;
/// Extracts the String value for the provided key in storage
/// \param key The key associated with the value being stored
///
///
/// returns:
/// The string value stored or nil if not present
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes the value associated with the provided key
/// \param key The key for the value to be removed
///
- (void)removeWithKey:(NSString * _Nonnull)key;
/// Clears all data stored in the SecurePrefs Object and makes it a dead object unable to save or extract data. SecurePrefs will have to be re-initialized again.
- (void)clearAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ShareCatalogObjectEvent")
@interface SFMCSdkShareCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ShipOrderEvent")
@interface SFMCSdkShipOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end


/// This class provides helper for storing encrypted key value pairs.
SWIFT_CLASS_NAMED("StorageManager")
@interface SFMCSdkStorageManager : NSObject
- (NSString * _Nonnull)getRegistrationId SWIFT_WARN_UNUSED_RESULT;
/// Creates a <a href="x-source-tag://SecurePrefs">SecurePrefs</a> object used to store encrypted key value pairs. Using the same name references the same storage location.
/// \code
/// let securePrefs1 = getSecurePrefs(name: "Hello")
/// let securePrefs2 = getSecurePrefs(name: "Hello")
///
/// securePrefs1.setString("first", for: "Key")
/// securePrefs2.setString("second", for: "Key")
///
/// let value = securePrefs1.stringForKey("Key")
/// value now equals "second"
///
/// \endcode\param name location name to store the secure preferences data
///
///
/// returns:
/// A <a href="x-source-tag://SecurePrefs">SecurePrefs</a> object associated with the name provided.
- (SFMCSdkSecurePrefs * _Nonnull)getOrCreateSecurePrefsWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Provides a generated string prefix for a given file
/// \param fileName String name of file to be given a prefix
///
///
/// returns:
/// String result of the file name prefixed with module and unique installation Id
- (NSString * _Nonnull)getFilenameForModuleInstallationWithFileName:(NSString * _Nonnull)fileName SWIFT_WARN_UNUSED_RESULT;
/// Provides a way to set/override the accessibility attribute for Keychain
/// \param accessibleAttribute CFTypeRef which has any one of below values
/// kSecAttrAccessibleWhenUnlocked
/// kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly
/// kSecAttrAccessibleWhenUnlockedThisDeviceOnly
/// kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
/// kSecAttrAccessibleAlwaysThisDeviceOnly
///
+ (void)setKeychainAccessibilityAttributeWithAccessibleAttribute:(CFTypeRef _Nullable)accessibleAttribute;
/// Returns accessible attribute set by the SDK or overridden value by the consuming application
///
/// returns:
/// CFTypeRef which has any one of below values
/// kSecAttrAccessibleWhenUnlocked
/// kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly
/// kSecAttrAccessibleWhenUnlockedThisDeviceOnly
/// kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
/// kSecAttrAccessibleAlwaysThisDeviceOnly
+ (CFTypeRef _Nullable)keychainAccessibilityAttribute SWIFT_WARN_UNUSED_RESULT;
/// Sets whether or not keychain access errors cause a fatal exception.
/// \param errorsAreFatal Whether keychain access errors should be fatal. 
///
+ (void)setKeychainAccessErrorsAreFatalWithErrorsAreFatal:(BOOL)errorsAreFatal;
///
/// returns:
/// Bool Indicates whether keychain access errors cause a fatal exception.  Default is YES.
+ (BOOL)keychainAccessErrorsAreFatal SWIFT_WARN_UNUSED_RESULT;
/// Provides a way to set/override the  Protection level for File system
/// \param fileProtectionType FileProtectionType which has any one of the below values
/// NSFileProtectionComplete
/// NSFileProtectionCompleteUnlessOpen
/// NSFileProtectionCompleteUntilFirstUserAuthentication
/// NSFileProtectionNone
///
+ (void)setFileSystemProtectionTypeWithFileProtectionType:(NSFileProtectionType _Nullable)fileProtectionType;
/// Returns File protection type set by the SDK or overridden value by the consuming application
///
/// returns:
/// FileProtectionType which has any one of below values
/// NSFileProtectionComplete
/// NSFileProtectionCompleteUnlessOpen
/// NSFileProtectionCompleteUntilFirstUserAuthentication
/// NSFileProtectionNone
+ (NSFileProtectionType _Nullable)fileSystemProtectionType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7SFMCSDK10Subscriber_")
@protocol Subscriber
@property (nonatomic, readonly) enum SFMCSdkModuleName name;
- (void)receiveWithMessage:(SFMCSdkMessage * _Nonnull)message;
@end


SWIFT_CLASS_NAMED("SystemEvent")
@interface SFMCSdkSystemEvent : NSObject <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name attributes:(NSDictionary<NSString *, id> * _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_PROTOCOL_NAMED("URLHandlingDelegate")
@protocol SFMCSdkURLHandlingDelegate
- (void)sfmc_handleURL:(NSURL * _Nonnull)url type:(NSString * _Nonnull)type;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ViewCatalogObjectDetailEvent")
@interface SFMCSdkViewCatalogObjectDetailEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ViewCatalogObjectEvent")
@interface SFMCSdkViewCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLRequest;

/// This class is a network request wrapper. Use <a href="x-source-tag://Builder">Builder</a> for request building.
SWIFT_CLASS_NAMED("WrappedRequest")
@interface SFMCSdkWrappedRequest : NSObject
/// Network call request url
@property (nonatomic, copy) NSURLRequest * _Nonnull request;
/// Request name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Request rate limit
@property (nonatomic, readonly) NSTimeInterval rateLimit;
/// Request tag
@property (nonatomic, readonly, copy) NSString * _Nullable tag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This is a helper class for request building.
SWIFT_CLASS_NAMED("Builder")
@interface SFMCSdkWrappedRequestBuilder : NSObject
/// Initializer for the Builder.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the Http method.
/// \param method http method
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)method:(NSString * _Nonnull)method SWIFT_WARN_UNUSED_RESULT;
/// Sets the network call request url.
/// \param url request url
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)url:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Sets the network call request url.
/// \param base base request url
///
/// \param path request url path
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)urlWithBase:(NSString * _Nonnull)base path:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Adds or replaces existing header.
/// \param key header key
///
/// \param value header value
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)addOrReplaceHeaderWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Sets payload of the request.
/// \param body payload
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
/// Sets timeout on the request
/// \param seconds timeout in seconds
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)timeout:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Sets rate limiting on the requet
/// \param seconds rate limiting in seconds
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)rateLimit:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Sets name of the request
/// \param name request name
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)name:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Sets up tag on the request
/// \param tag request tag
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)tag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Builds request of given parameters.
///
/// returns:
/// <a href="x-source-tag://WrappedRequest">WrappedRequest</a> instance
- (SFMCSdkWrappedRequest * _Nullable)build SWIFT_WARN_UNUSED_RESULT;
@end

@class NSHTTPURLResponse;
@class NSURLResponse;

/// This class is a network response wrapper
SWIFT_CLASS_NAMED("WrappedResponse")
@interface SFMCSdkWrappedResponse : NSObject
/// Response data
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Network Response to an HTTP URL load
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nullable response;
/// Generic error (optional)
@property (nonatomic, readonly) NSError * _Nullable error;
/// Success status based on the response status code (200-299 is considered a successful call)
@property (nonatomic, readonly) BOOL isSuccess;
/// Autorization status based on the response status code (401 is unautorized)
@property (nonatomic, readonly) BOOL isUnauthorized;
/// Time left on the execution timespan of the request
@property (nonatomic, readonly) int64_t timeToExecute;
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nullable)response error:(NSError * _Nullable)error startTimeMillis:(int64_t)startTimeMillis endTimeMillis:(int64_t)endTimeMillis OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef SFMCSDK_SWIFT_H
#define SFMCSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SFMCSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
enum SFMCSdkEventCategory : NSInteger;

SWIFT_PROTOCOL_NAMED("Event")
@protocol SFMCSdkEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@end


SWIFT_CLASS_NAMED("EngagementEvent")
@interface SFMCSdkEngagementEvent : NSObject <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SFMCSdkLineItem;

/// :nodoc:
SWIFT_CLASS_NAMED("CartEvent")
@interface SFMCSdkCartEvent : SFMCSdkEngagementEvent
@property (nonatomic, readonly, copy) NSArray<SFMCSdkLineItem *> * _Nonnull lineItems;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("AddToCartEvent")
@interface SFMCSdkAddToCartEvent : SFMCSdkCartEvent
- (nonnull instancetype)initWithLineItem:(SFMCSdkLineItem * _Nonnull)lineItem OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("Behavior")
@interface SFMCSdkBehavior : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Behavior notified when the application’s UI is no longer visible on the screen.
/// :nodoc:
SWIFT_CLASS_NAMED("AppBackgrounded")
@interface SFMCSdkAppBackgrounded : SFMCSdkBehavior
@end


/// Behavior notified when the application comes into the foreground and is “sticky”
/// :nodoc:
SWIFT_CLASS_NAMED("AppForegrounded")
@interface SFMCSdkAppForegrounded : SFMCSdkBehavior
@end


/// Behavior notified when the application’s version changes.
/// :nodoc:
SWIFT_CLASS_NAMED("AppVersionChanged")
@interface SFMCSdkAppVersionChanged : SFMCSdkBehavior
@end


///
SWIFT_CLASS_NAMED("AuthHeader")
@interface SFMCSdkAuthHeader : NSObject
/// Header key
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// Header value
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Initializer for the AuthHeader.
/// \param key header key
///
/// \param value header value
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSLock;

/// Protocol to adhere in order to provide an interface for extending modules to implement authentication.
SWIFT_PROTOCOL_NAMED("Authenticator")
@protocol SFMCSdkAuthenticator
/// Coordinates multiple threads of execution within the same app.
@property (nonatomic, readonly, strong) NSLock * _Nonnull lock;
/// Returns cached token header.
- (SFMCSdkAuthHeader * _Nullable)getCachedTokenHeader SWIFT_WARN_UNUSED_RESULT;
/// Refreshes auth token header.
- (SFMCSdkAuthHeader * _Nullable)refreshAuthTokenHeader SWIFT_WARN_UNUSED_RESULT;
/// Deletes cached token.
- (void)deleteCachedToken;
@end



/// This class allows modules to register observers to receive requested behavior event types.
/// Observers must adhere to the <a href="x-source-tag://BehaviorObserver">BehaviorObserver</a> protocol where the <a href="x-source-tag://BehaviorManager">BehaviorManager</a> will notify each observer via their respective <a href="x-source-tag://OnBehavior">onBehavior()</a> function. Behavior types that can be tracked include: (<a href="x-source-tag://BehaviorType">BehaviorType</a>)
SWIFT_CLASS_NAMED("BehaviorManager")
@interface SFMCSdkBehaviorManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to adhere to when creating an observer to listen to behavior events sent by the <a href="x-source-tag://BehaviorManager">BehaviorManager</a>
SWIFT_PROTOCOL_NAMED("BehaviorObserver")
@protocol SFMCSdkBehaviorObserver
/// Behavior types to observe.
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull behaviorTypesToObserve;
/// Action that needs to be taken on behavior event sent by the <a href="x-source-tag://BehaviorManager">BehaviorManager</a>
/// \param behavior instance of behavior adopting <a href="x-source-tag://Behavior">Behavior</a> protocol
///
- (void)onBehaviorWithBehavior:(SFMCSdkBehavior * _Nonnull)behavior;
@end

/// An enumeration of behaviors to track recognized by the SFMCSdk.
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkBehaviorType, "BehaviorType", open) {
/// App is forgrounded
  SFMCSdkBehaviorTypeAppForegrounded = 0,
/// App is backgrounded
  SFMCSdkBehaviorTypeAppBackgrounded = 1,
/// App version changed
  SFMCSdkBehaviorTypeAppVersionChanged = 2,
/// Screen entry
  SFMCSdkBehaviorTypeScreenEntry = 3,
};

enum SFMCSdkConsent : NSInteger;
@protocol SFMCSdkCoordinates;
@protocol SFMCSdkModuleIdentity;

SWIFT_PROTOCOL("_TtP7SFMCSDK12CdpInterface_")
@protocol CdpInterface
- (enum SFMCSdkConsent)getConsent SWIFT_WARN_UNUSED_RESULT;
- (void)setConsentWithConsent:(enum SFMCSdkConsent)consent;
- (void)setLocationWithCoordinates:(id <SFMCSdkCoordinates> _Nullable)coordinates expiresIn:(NSInteger)expiresIn;
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
@end

enum SFMCSdkModuleStatus : NSInteger;

SWIFT_CLASS_NAMED("CDP")
@interface SFMCSdkCDP : NSObject <CdpInterface>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (enum SFMCSdkModuleStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
- (enum SFMCSdkConsent)getConsent SWIFT_WARN_UNUSED_RESULT;
- (void)setConsentWithConsent:(enum SFMCSdkConsent)consent;
- (void)setLocationWithCoordinates:(id <SFMCSdkCoordinates> _Nullable)coordinates expiresIn:(NSInteger)expiresIn;
@end

@class SFMCSdkOrder;

/// :nodoc:
SWIFT_CLASS_NAMED("OrderEvent")
@interface SFMCSdkOrderEvent : SFMCSdkEngagementEvent
@property (nonatomic, readonly, strong) SFMCSdkOrder * _Nonnull order;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("CancelOrderEvent")
@interface SFMCSdkCancelOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("CatalogObject")
@interface SFMCSdkCatalogObject : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull relatedCatalogObjects;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type id:(NSString * _Nonnull)id attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes relatedCatalogObjects:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)relatedCatalogObjects OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("CatalogObjectEvent")
@interface SFMCSdkCatalogObjectEvent : SFMCSdkEngagementEvent
@property (nonatomic, readonly, strong) SFMCSdkCatalogObject * _Nonnull catalogObject;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("CommentCatalogObjectEvent")
@interface SFMCSdkCommentCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("Compatibility")
@interface SFMCSdkCompatibility : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SFMCSdkWrappedRequest;
@class SFMCSdkWrappedResponse;

/// This class is is a complete tuple-like wrapper that includes <a href="x-source-tag://WrappedRequest">WrappedRequest</a> and <a href="x-source-tag://WrappedResponse">WrappedResponse</a>
SWIFT_CLASS_NAMED("CompletedCall")
@interface SFMCSdkCompletedCall : NSObject
/// <a href="x-source-tag://WrappedRequest">WrappedRequest</a> instance
@property (nonatomic, readonly, strong) SFMCSdkWrappedRequest * _Nonnull wrappedRequest;
/// <a href="x-source-tag://WrappedResponse">WrappedResponse</a> instance
@property (nonatomic, readonly, strong) SFMCSdkWrappedResponse * _Nonnull wrappedResponse;
- (nonnull instancetype)init:(SFMCSdkWrappedRequest * _Nonnull)wrappedRequest :(SFMCSdkWrappedResponse * _Nonnull)wrappedResponse OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Config")
@interface SFMCSdkConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol SFMCSdkModuleConfig;
enum SFMCSdkOperationResult : NSInteger;

SWIFT_CLASS_NAMED("ConfigBuilder")
@interface SFMCSdkConfigBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Set Cdp Module
/// \param config Cdp Configuration
///
///
/// returns:
/// ConfigBuilder
- (SFMCSdkConfigBuilder * _Nonnull)setCdpWithConfig:(id <SFMCSdkModuleConfig> _Nonnull)config onCompletion:(void (^ _Nullable)(enum SFMCSdkOperationResult))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Set Push Module
/// \param config Push  Configuration
///
///
/// returns:
/// ConfigBuilder
- (SFMCSdkConfigBuilder * _Nonnull)setPushWithConfig:(id <SFMCSdkModuleConfig> _Nonnull)config onCompletion:(void (^ _Nullable)(enum SFMCSdkOperationResult))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Build SDK configuiration
///
/// returns:
/// Config for the SDK
- (SFMCSdkConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

/// An enumeration of available consent options.
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkConsent, "Consent", open) {
/// Opt in for submitting data
  SFMCSdkConsentOptIn = 0,
/// Opt out  of submitting data
  SFMCSdkConsentOptOut = 1,
/// Pending consent for submitting data  (default option)
  SFMCSdkConsentPending = 2,
/// None (Objc compatibility optional)
  SFMCSdkConsentNone = 3,
};


SWIFT_PROTOCOL_NAMED("Coordinates")
@protocol SFMCSdkCoordinates
@property (nonatomic, readonly) double latitude;
@property (nonatomic, readonly) double longitude;
@end


SWIFT_CLASS_NAMED("CustomEvent")
@interface SFMCSdkCustomEvent : NSObject <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nullable instancetype)initWithName:(NSString * _Nonnull)name attributes:(NSDictionary<NSString *, id> * _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSDKDataMergePolicy, "DataMergePolicy", open) {
  SFMCSDKDataMergePolicyNone = 0,
  SFMCSDKDataMergePolicyAuto = 1,
  SFMCSDKDataMergePolicyManual = 2,
};


/// :nodoc:
SWIFT_CLASS_NAMED("DeliverOrderEvent")
@interface SFMCSdkDeliverOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// Encryption Manager class is used for creating a unique encryption key (AES 256 encryption) for modules.
SWIFT_CLASS_NAMED("EncryptionManager")
@interface SFMCSdkEncryptionManager : NSObject
/// Encrypts a String value using AES 256
/// \param string String to be encrypted with unicode String encoding
///
///
/// returns:
/// The encrypted String data. Returns nil if the data is unable to be encrypted
- (NSData * _Nullable)encryptWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Decrypts data of a String and returns the String representation of the data
/// \param stringData The AES 256 encrypted data representation of a String
///
///
/// returns:
/// The String value associated with the encrypted data provided. Returns nil if the data is unable to be encrypted
- (NSString * _Nullable)decryptWithStringData:(NSData * _Nonnull)stringData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



enum SFMCSdkMessageProducer : NSInteger;
enum SFMCSdkModuleName : NSInteger;
@protocol Subscriber;

SWIFT_CLASS_NAMED("EventBus")
@interface SFMCSdkEventBus : NSObject
+ (void)publishWithProducer:(enum SFMCSdkMessageProducer)producer event:(id <SFMCSdkEvent> _Nonnull)event;
+ (void)publishToTarget:(enum SFMCSdkModuleName)target producer:(enum SFMCSdkMessageProducer)producer event:(id <SFMCSdkEvent> _Nonnull)event;
+ (void)subscribeWithSubscriber:(id <Subscriber> _Nonnull)subscriber;
+ (void)unsubscribeWithSubscriber:(id <Subscriber> _Nonnull)subscriber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkEventCategory, "EventCategory", open) {
  SFMCSdkEventCategoryEngagement = 0,
  SFMCSdkEventCategoryIdentity = 1,
  SFMCSdkEventCategorySystem = 2,
};


/// :nodoc:
SWIFT_CLASS_NAMED("ExchangeOrderEvent")
@interface SFMCSdkExchangeOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("FakeEvent")
@interface SFMCSdkFakeEvent : NSObject <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nullable instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("FavoriteCatalogObjectEvent")
@interface SFMCSdkFavoriteCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("IDENTITY")
@interface SFMCSdkIDENTITY : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
/// Set profile ID to all operational, subscribed modules.
/// \param profile profile to set
///
- (void)setProfileId:(NSString * _Nonnull)profile;
- (void)setProfileIdWithProfile:(NSString * _Nonnull)profile rawModules:(NSArray<NSNumber *> * _Nonnull)rawModules;
- (void)setProfileIdWithProfiles:(NSDictionary<NSNumber *, NSString *> * _Nonnull)profiles;
/// Clear a profile attribute
/// \param key to clear value for
///
- (void)clearProfileAttributeWithKey:(NSString * _Nonnull)key;
/// Clear profile attributes
/// \param keys to clear values for
///
- (void)clearProfileAttributesWithKeys:(NSArray<NSString *> * _Nonnull)keys;
/// Set Profile Attributes to all operational, subscribed modules.
/// \param attributes attributes to set
///
- (void)setProfileAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (void)setProfileAttributesNamedWithAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes rawModules:(NSArray<NSNumber *> * _Nonnull)rawModules;
- (void)setProfileAttributesNamed:(NSDictionary<NSNumber *, NSDictionary<NSString *, NSString *> *> * _Nonnull)attributes;
@end


SWIFT_PROTOCOL_NAMED("IdentityEventProtocol")
@protocol SFMCSdkIdentityEventProtocol <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nullable profileId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable profileAttributes;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("IdentityEvent")
@interface SFMCSdkIdentityEvent : NSObject <SFMCSdkIdentityEventProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSString * _Nullable profileId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable profileAttributes;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)initWithProfileId:(NSString * _Nonnull)profileId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithProfileAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)profileAttributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("InAppMessageEventDelegate")
@protocol SFMCSdkInAppMessageEventDelegate
@optional
- (BOOL)sfmc_shouldShowInAppMessage:(NSDictionary * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (void)sfmc_didShowInAppMessage:(NSDictionary * _Nonnull)message;
- (void)sfmc_didCloseInAppMessage:(NSDictionary * _Nonnull)message;
@end


SWIFT_PROTOCOL_NAMED("InboxMessagesDataSource")
@protocol SFMCSdkInboxMessagesDataSource <UITableViewDataSource>
@end


SWIFT_PROTOCOL_NAMED("InboxMessagesDelegate")
@protocol SFMCSdkInboxMessagesDelegate <UITableViewDelegate>
@end

@class NSDecimalNumber;

/// :nodoc:
SWIFT_CLASS_NAMED("LineItem")
@interface SFMCSdkLineItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull catalogObjectType;
@property (nonatomic, readonly, copy) NSString * _Nonnull catalogObjectId;
@property (nonatomic, readonly) NSInteger quantity;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable price;
@property (nonatomic, readonly, copy) NSString * _Nullable currency;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)initWithCatalogObjectType:(NSString * _Nonnull)catalogObjectType catalogObjectId:(NSString * _Nonnull)catalogObjectId quantity:(NSInteger)quantity price:(NSDecimalNumber * _Nullable)price currency:(NSString * _Nullable)currency attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("LocationDelegate")
@protocol SFMCSdkLocationDelegate
- (BOOL)sfmc_shouldShowLocationMessage:(NSDictionary * _Nonnull)message forRegion:(NSDictionary * _Nonnull)region SWIFT_WARN_UNUSED_RESULT;
@end

/// Log Level detail definition
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkLogLevel, "LogLevel", open) {
/// Debug log level
  SFMCSdkLogLevelDebug = 0,
/// Warn log level
  SFMCSdkLogLevelWarn = 1,
/// Error log level
  SFMCSdkLogLevelError = 2,
/// Fault log level
  SFMCSdkLogLevelFault = 3,
};

enum SFMCSdkLoggerCategory : NSInteger;

/// Defines how logs are being outputted.
SWIFT_CLASS_NAMED("LogOutputter")
@interface SFMCSdkLogOutputter : NSObject
/// Captures logs using the native unified logging system (log level must be defined as OSLogType)
/// \param level (<a href="x-source-tag://LogLevel">LogLevel</a>) instance to define log level detail
///
/// \param subsystem Subsystem identifying  a specific subsystem of app
///
/// \param category System-defined category
///
/// \param message Message
///
- (void)outWithLevel:(enum SFMCSdkLogLevel)level subsystem:(NSString * _Nonnull)subsystem category:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_PROTOCOL("_TtP7SFMCSDK6Logger_")
@protocol Logger
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull redactedValues;
@end

/// Logger Category definition
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkLoggerCategory, "LoggerCategory", open) {
  SFMCSdkLoggerCategoryAuth = 0,
  SFMCSdkLoggerCategoryBehavior = 1,
  SFMCSdkLoggerCategoryEncryption = 2,
  SFMCSdkLoggerCategoryEventBus = 3,
  SFMCSdkLoggerCategoryNetwork = 4,
  SFMCSdkLoggerCategoryModule = 5,
  SFMCSdkLoggerCategorySdk = 6,
  SFMCSdkLoggerCategoryStorage = 7,
  SFMCSdkLoggerCategoryConsent = 8,
  SFMCSdkLoggerCategoryCoredata = 9,
  SFMCSdkLoggerCategoryDatabase = 10,
  SFMCSdkLoggerCategoryEvent = 11,
  SFMCSdkLoggerCategoryIdentity = 12,
  SFMCSdkLoggerCategoryInterface = 13,
  SFMCSdkLoggerCategoryLocation = 14,
  SFMCSdkLoggerCategorySession = 15,
  SFMCSdkLoggerCategoryUtil = 16,
};


SWIFT_CLASS_NAMED("Message")
@interface SFMCSdkMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkMessageProducer, "MessageProducer", open) {
  SFMCSdkMessageProducerCdp = 0,
  SFMCSdkMessageProducerPush = 1,
  SFMCSdkMessageProducerSdk = 2,
};


/// SFMCSdk Module Configuration protocol that all registered modules adopt as configuration.
SWIFT_PROTOCOL_NAMED("ModuleConfig")
@protocol SFMCSdkModuleConfig
/// Module name
@property (nonatomic, readonly) enum SFMCSdkModuleName name;
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Enable or disbale screen tracking
@property (nonatomic, readonly) BOOL trackScreens;
@end


SWIFT_PROTOCOL_NAMED("ModuleIdentity")
@protocol SFMCSdkModuleIdentity
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationId;
@property (nonatomic, readonly, copy) NSString * _Nullable profileId;
@property (nonatomic, readonly, copy) NSString * _Nullable installationId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable customProperties;
- (NSString * _Nullable)customPropertiesToJson SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ModuleLogger")
@interface SFMCSdkModuleLogger : NSObject <Logger>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull redactedValues;
- (nonnull instancetype)initWithModule:(enum SFMCSdkModuleName)module_ redactedValues:(NSArray<NSString *> * _Nonnull)redactedValues OBJC_DESIGNATED_INITIALIZER;
- (void)setWithRedactedValues:(NSArray<NSString *> * _Nonnull)redactedValues;
- (void)debugWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)warningWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)errorWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)faultWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkModuleName, "ModuleName", open) {
  SFMCSdkModuleNameCdp = 0,
  SFMCSdkModuleNamePush = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkModuleStatus, "ModuleStatus", open) {
  SFMCSdkModuleStatusCancelled = 0,
  SFMCSdkModuleStatusDisabled = 1,
  SFMCSdkModuleStatusFailed = 2,
  SFMCSdkModuleStatusInactive = 3,
  SFMCSdkModuleStatusInitializing = 4,
  SFMCSdkModuleStatusOperational = 5,
};


@class SFMCSdkSecurePrefs;

/// This class is a helper for making synchronous and asynchronous network calls with an optional authenticator.
SWIFT_CLASS_NAMED("NetworkManager")
@interface SFMCSdkNetworkManager : NSObject
- (nonnull instancetype)initWithNetworkPreferences:(SFMCSdkSecurePrefs * _Nonnull)networkPreferences authenticator:(id <SFMCSdkAuthenticator> _Nullable)authenticator OBJC_DESIGNATED_INITIALIZER;
/// Executes synchronous network call.
/// \param wrappedRequest instance of <a href="x-source-tag://WrappedRequest">WrappedRequest</a>
///
///
/// returns:
/// instance of <a href="x-source-tag://CompletedCall">CompletedCall</a> that contains both the request and the response
- (SFMCSdkCompletedCall * _Nonnull)executeSync:(SFMCSdkWrappedRequest * _Nonnull)wrappedRequest SWIFT_WARN_UNUSED_RESULT;
/// Executes aynchronous network call.
/// \param wrappedRequest instance of <a href="x-source-tag://WrappedRequest">WrappedRequest</a>
///
/// \param completionHandler callback on response
///
- (void)executeAsync:(SFMCSdkWrappedRequest * _Nonnull)wrappedRequest completionHandler:(void (^ _Nonnull)(SFMCSdkCompletedCall * _Nonnull))completionHandler;
/// Temporarily blocks retries of given request. Waiting time is stored in the network preferences under the requests name key.
/// \param requestName Name of the request
///
///
/// returns:
/// Bool
- (BOOL)isBlockedByRetryAfter:(NSString * _Nonnull)requestName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumaration of Network Manager Error Options.
typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkNetworkManagerError, "NetworkManagerError", open) {
/// Fetching token failed
  SFMCSdkNetworkManagerErrorTokenFetchFailed = 0,
/// Refreshing token failed
  SFMCSdkNetworkManagerErrorTokenRefreshFailed = 1,
/// Too Many requests
  SFMCSdkNetworkManagerErrorTooManyRequests = 2,
/// Request is already in flight
  SFMCSdkNetworkManagerErrorRequestAlreadyInFlight = 3,
};
static NSString * _Nonnull const SFMCSdkNetworkManagerErrorDomain = @"SFMCSDK.NetworkManagerError";

typedef SWIFT_ENUM_NAMED(NSInteger, SFMCSdkOperationResult, "OperationResult", open) {
  SFMCSdkOperationResultCancelled = 0,
  SFMCSdkOperationResultError = 1,
  SFMCSdkOperationResultSuccess = 2,
  SFMCSdkOperationResultTimeout = 3,
};


/// :nodoc:
SWIFT_CLASS_NAMED("Order")
@interface SFMCSdkOrder : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSArray<SFMCSdkLineItem *> * _Nonnull lineItems;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable totalValue;
@property (nonatomic, readonly, copy) NSString * _Nullable currency;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id lineItems:(NSArray<SFMCSdkLineItem *> * _Nonnull)lineItems totalValue:(NSDecimalNumber * _Nullable)totalValue currency:(NSString * _Nullable)currency attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UNNotificationRequest;
@class UITableView;
@class NSNumber;
@class CLRegion;
@protocol SFMCSdkURLHandlingDelegate;

SWIFT_PROTOCOL("_TtP7SFMCSDK13PushInterface_")
@protocol PushInterface
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
- (void)tearDown;
- (NSString * _Nullable)contactKey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
- (NSSet * _Nullable)addTags:(NSArray * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
- (NSSet * _Nullable)tags SWIFT_WARN_UNUSED_RESULT;
- (void)setDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)setDebugLoggingEnabled:(BOOL)enabled;
- (NSDictionary * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)setNotificationRequest:(UNNotificationRequest * _Nonnull)request;
- (UNNotificationRequest * _Nullable)notificationRequest SWIFT_WARN_UNUSED_RESULT;
- (void)setNotificationUserInfo:(NSDictionary * _Nonnull)userInfo;
- (NSDictionary * _Nonnull)notificationUserInfo SWIFT_WARN_UNUSED_RESULT;
- (void)setPushEnabled:(BOOL)pushEnabled;
- (BOOL)pushEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)refreshWithFetchCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (void)setRegistrationCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull))registrationCallback;
- (void)unsetRegistrationCallback;
- (BOOL)setSignedString:(NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
- (void)setEventDelegate:(id <SFMCSdkInAppMessageEventDelegate> _Nullable)delegate;
- (NSString * _Nullable)messageIdForMessage:(NSDictionary * _Nonnull)forMessage SWIFT_WARN_UNUSED_RESULT;
- (void)showInAppMessageWithMessageId:(NSString * _Nonnull)messageId;
- (BOOL)setInAppMessageWithFontName:(NSString * _Nullable)fontName SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getAllMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getUnreadMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getReadMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getDeletedMessages SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getAllMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getUnreadMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getReadMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getDeletedMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageRead:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageDeleted:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageWithIdReadWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageWithIdDeletedWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markAllMessagesRead SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markAllMessagesDeleted SWIFT_WARN_UNUSED_RESULT;
- (BOOL)refreshMessages SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkInboxMessagesDataSource> _Nullable)inboxMessagesTableViewDataSourceForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkInboxMessagesDelegate> _Nullable)inboxMessagesTableViewDelegateForTableView:(UITableView * _Nonnull)tableView dataSource:(id <SFMCSdkInboxMessagesDataSource> _Nonnull)dataSource SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setPiIdentifier:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)piIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)trackMessageOpened:(NSDictionary * _Nonnull)inboxMessage;
- (void)trackPageViewWithUrl:(NSString * _Nonnull)url title:(NSString * _Nullable)title item:(NSString * _Nullable)item search:(NSString * _Nullable)search;
- (void)trackCartContents:(NSDictionary * _Nonnull)cartDictionary;
- (void)trackCartConversion:(NSDictionary * _Nonnull)orderDictionary;
- (NSDictionary * _Nullable)cartItemDictionaryWithPrice:(NSNumber * _Nonnull)price quantity:(NSNumber * _Nonnull)quantity item:(NSString * _Nonnull)item uniqueId:(NSString * _Nullable)uniqueId SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nullable)cartDictionaryWithCartItem:(NSArray * _Nonnull)cartItem SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nullable)orderDictionaryWithOrderNumber:(NSString * _Nonnull)orderNumber shipping:(NSNumber * _Nonnull)shipping discount:(NSNumber * _Nonnull)discount cart:(NSDictionary * _Nonnull)cart SWIFT_WARN_UNUSED_RESULT;
- (void)setLocationDelegate:(id <SFMCSdkLocationDelegate> _Nullable)delegate;
- (CLRegion * _Nullable)regionFromDictionary:(NSDictionary * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)locationEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)startWatchingLocation;
- (void)stopWatchingLocation;
- (BOOL)watchingLocation SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nullable)lastKnownLocation SWIFT_WARN_UNUSED_RESULT;
- (void)setURLHandlingDelegate:(id <SFMCSdkURLHandlingDelegate> _Nullable)delegate;
- (BOOL)resetDataPolicy SWIFT_WARN_UNUSED_RESULT;
@end


/// Push module
SWIFT_CLASS_NAMED("PUSH")
@interface SFMCSdkPUSH : NSObject <PushInterface>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (enum SFMCSdkModuleStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
- (void)tearDown SWIFT_DEPRECATED_MSG("The SFMCSdk takes care of tear downs during initializations, making this method unnecessary. Its usage should be avoided to prevent race conditions.");
- (NSString * _Nullable)contactKey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
- (NSSet * _Nullable)addTags:(NSArray * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
- (NSSet * _Nullable)tags SWIFT_WARN_UNUSED_RESULT;
- (void)setDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)setDebugLoggingEnabled:(BOOL)enabled;
- (NSDictionary * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)setNotificationRequest:(UNNotificationRequest * _Nonnull)request;
- (UNNotificationRequest * _Nullable)notificationRequest SWIFT_WARN_UNUSED_RESULT;
- (void)setNotificationUserInfo:(NSDictionary * _Nonnull)userInfo;
- (NSDictionary * _Nonnull)notificationUserInfo SWIFT_WARN_UNUSED_RESULT;
- (void)setPushEnabled:(BOOL)pushEnabled;
- (BOOL)pushEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)refreshWithFetchCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Register a callback that will be notified when Registration related events happen
/// @param registrationCallback   closure to be provided when registration event occurs
- (void)setRegistrationCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull))registrationCallback;
/// Removes the registration callback
- (void)unsetRegistrationCallback;
- (BOOL)setSignedString:(NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
- (void)setEventDelegate:(id <SFMCSdkInAppMessageEventDelegate> _Nullable)delegate;
- (NSString * _Nullable)messageIdForMessage:(NSDictionary * _Nonnull)forMessage SWIFT_WARN_UNUSED_RESULT;
- (void)showInAppMessageWithMessageId:(NSString * _Nonnull)messageId;
- (BOOL)setInAppMessageWithFontName:(NSString * _Nullable)fontName SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getAllMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getUnreadMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getReadMessages SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)getDeletedMessages SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getAllMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getUnreadMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getReadMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)getDeletedMessagesCount SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageRead:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageDeleted:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageWithIdReadWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markMessageWithIdDeletedWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markAllMessagesRead SWIFT_WARN_UNUSED_RESULT;
- (BOOL)markAllMessagesDeleted SWIFT_WARN_UNUSED_RESULT;
- (BOOL)refreshMessages SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkInboxMessagesDataSource> _Nullable)inboxMessagesTableViewDataSourceForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (id <SFMCSdkInboxMessagesDelegate> _Nullable)inboxMessagesTableViewDelegateForTableView:(UITableView * _Nonnull)tableView dataSource:(id <SFMCSdkInboxMessagesDataSource> _Nonnull)dataSource SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setPiIdentifier:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)piIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)trackMessageOpened:(NSDictionary * _Nonnull)inboxMessage;
- (void)trackPageViewWithUrl:(NSString * _Nonnull)url title:(NSString * _Nullable)title item:(NSString * _Nullable)item search:(NSString * _Nullable)search;
/// :nodoc:
- (void)trackCartContents:(NSDictionary * _Nonnull)cartDictionary;
/// :nodoc:
- (void)trackCartConversion:(NSDictionary * _Nonnull)orderDictionary;
/// :nodoc:
- (NSDictionary * _Nullable)cartItemDictionaryWithPrice:(NSNumber * _Nonnull)price quantity:(NSNumber * _Nonnull)quantity item:(NSString * _Nonnull)item uniqueId:(NSString * _Nullable)uniqueId SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nullable)cartDictionaryWithCartItem:(NSArray * _Nonnull)cartItem SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nullable)orderDictionaryWithOrderNumber:(NSString * _Nonnull)orderNumber shipping:(NSNumber * _Nonnull)shipping discount:(NSNumber * _Nonnull)discount cart:(NSDictionary * _Nonnull)cart SWIFT_WARN_UNUSED_RESULT;
- (void)setLocationDelegate:(id <SFMCSdkLocationDelegate> _Nullable)delegate;
- (CLRegion * _Nullable)regionFromDictionary:(NSDictionary * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)locationEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)startWatchingLocation;
- (void)stopWatchingLocation;
- (BOOL)watchingLocation SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nullable)lastKnownLocation SWIFT_WARN_UNUSED_RESULT;
- (void)setURLHandlingDelegate:(id <SFMCSdkURLHandlingDelegate> _Nullable)delegate;
- (BOOL)resetDataPolicy SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("PreorderEvent")
@interface SFMCSdkPreorderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("PurchaseOrderEvent")
@interface SFMCSdkPurchaseOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("QuickViewCatalogObjectEvent")
@interface SFMCSdkQuickViewCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("RemoveFromCartEvent")
@interface SFMCSdkRemoveFromCartEvent : SFMCSdkCartEvent
- (nonnull instancetype)initWithLineItem:(SFMCSdkLineItem * _Nonnull)lineItem OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReplaceCartEvent")
@interface SFMCSdkReplaceCartEvent : SFMCSdkCartEvent
- (nonnull instancetype)initWithLineItems:(NSArray<SFMCSdkLineItem *> * _Nonnull)lineItems OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReturnOrderEvent")
@interface SFMCSdkReturnOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReviewCatalogObjectEvent")
@interface SFMCSdkReviewCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end

@class SFMCSdkComponents;

SWIFT_PROTOCOL("_TtP7SFMCSDK10SFMCModule_")
@protocol SFMCModule
@property (nonatomic, readonly) enum SFMCSdkModuleName name;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull moduleVersion;)
+ (NSString * _Nonnull)moduleVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable stateProperties;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)stateProperties SWIFT_WARN_UNUSED_RESULT;
+ (void)setStateProperties:(NSDictionary<NSString *, NSString *> * _Nullable)newValue;
+ (id <SFMCModule> _Nullable)initModuleWithConfig:(id <SFMCSdkModuleConfig> _Nonnull)config components:(SFMCSdkComponents * _Nonnull)components SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("SFMCSdk")
@interface SFMCSdk : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SFMCSdkCDP * _Nonnull cdp;)
+ (SFMCSdkCDP * _Nonnull)cdp SWIFT_WARN_UNUSED_RESULT;
+ (void)setCdp:(SFMCSdkCDP * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SFMCSdkPUSH * _Nonnull mp;)
+ (SFMCSdkPUSH * _Nonnull)mp SWIFT_WARN_UNUSED_RESULT;
+ (void)setMp:(SFMCSdkPUSH * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SFMCSdkIDENTITY * _Nonnull identity;)
+ (SFMCSdkIDENTITY * _Nonnull)identity SWIFT_WARN_UNUSED_RESULT;
+ (void)setIdentity:(SFMCSdkIDENTITY * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setSdkVersion:(NSString * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)initializeSdk:(SFMCSdkConfig * _Nonnull)configuration;
+ (void)trackWithEvent:(id <SFMCSdkEvent> _Nonnull)event;
+ (NSString * _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerWithLogLevel:(enum SFMCSdkLogLevel)logLevel logOutputter:(SFMCSdkLogOutputter * _Nonnull)logOutputter;
+ (void)setAutoMergePolicyOnCompletion:(void (^ _Nonnull)(BOOL))onCompletion;
+ (void)setManualMergePolicyWithHandler:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSDictionary * _Nonnull))handler;
+ (enum SFMCSDKDataMergePolicy)getDataMergePolicy SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)resetDataPolicyWithAppId:(NSString * _Nonnull)appId SWIFT_WARN_UNUSED_RESULT;
+ (void (^ _Nullable)(BOOL))getAutoDataPolicyCallBack SWIFT_WARN_UNUSED_RESULT;
+ (void (^ _Nullable)(NSDictionary * _Nonnull, NSDictionary * _Nonnull))getManualDataPolicyCallBack SWIFT_WARN_UNUSED_RESULT;
+ (void)clearLoggerFilters;
/// Provides a way to set/override the accessibility attribute for Keychain
/// \param accessibleAttribute CFTypeRef which has any one of below values
/// kSecAttrAccessibleWhenUnlocked
/// kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly
/// kSecAttrAccessibleWhenUnlockedThisDeviceOnly
/// kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
/// kSecAttrAccessibleAlwaysThisDeviceOnly
///
+ (void)setKeychainAccessibleAttributeWithAccessibleAttribute:(CFTypeRef _Nullable)accessibleAttribute;
/// Returns accessible attribute set by the SDK or overridden value by the consuming application
///
/// returns:
/// CFTypeRef which has any one of below values
/// kSecAttrAccessibleWhenUnlocked
/// kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly
/// kSecAttrAccessibleWhenUnlockedThisDeviceOnly
/// kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
/// kSecAttrAccessibleAlwaysThisDeviceOnly
+ (CFTypeRef _Nullable)keychainAccessibleAttribute SWIFT_WARN_UNUSED_RESULT;
/// Sets whether or not keychain access errors cause a fatal exception.
/// \param errorsAreFatal Whether keychain access errors should be fatal. 
///
+ (void)setKeychainAccessErrorsAreFatalWithErrorsAreFatal:(BOOL)errorsAreFatal;
///
/// returns:
/// Bool Indicates whether keychain access errors cause a fatal exception.  Default is YES.
+ (BOOL)keychainAccessErrorsAreFatal SWIFT_WARN_UNUSED_RESULT;
/// Provides a way to set/override the  Protection level for File system
/// \param fileProtectionType FileProtectionType which has any one of the below values
/// NSFileProtectionComplete
/// NSFileProtectionCompleteUnlessOpen
/// NSFileProtectionCompleteUntilFirstUserAuthentication
/// NSFileProtectionNone
///
+ (void)setFileProtectionTypeWithFileProtectionType:(NSFileProtectionType _Nullable)fileProtectionType;
/// Returns File protection type set by the SDK or overridden value by the consuming application
///
/// returns:
/// FileProtectionType which has any one of below values
/// NSFileProtectionComplete
/// NSFileProtectionCompleteUnlessOpen
/// NSFileProtectionCompleteUntilFirstUserAuthentication
/// NSFileProtectionNone
+ (NSFileProtectionType _Nullable)fileProtectionType SWIFT_WARN_UNUSED_RESULT;
+ (void)tearDownModuleWithName:(enum SFMCSdkModuleName)name SWIFT_DEPRECATED_MSG("The SFMCSdk takes care of tear downs during initializations, making this method unnecessary. Its usage should be avoided to prevent race conditions.");
@end

@class SFMCSdkStorageManager;

/// This class provides helper components for [SFMCSdkModule] subclasses
SWIFT_CLASS_NAMED("SFMCSdkComponents")
@interface SFMCSdkComponents : NSObject
/// <a href="x-source-tag://EncryptionManager">EncryptionManager</a> instance
@property (nonatomic, readonly, strong) SFMCSdkEncryptionManager * _Nonnull encryptionManager;
/// <a href="x-source-tag://StorageManager">StorageManager</a> instance
@property (nonatomic, readonly, strong) SFMCSdkStorageManager * _Nonnull storageManager;
/// <a href="x-source-tag://BehaviorManager">BehaviorManager</a> instance
@property (nonatomic, readonly, strong) SFMCSdkBehaviorManager * _Nonnull behaviorManager;
/// Creates network manager.
/// \param authenticator instance of (<a href="x-source-tag://Authenticator">Authenticator</a>)
///
///
/// returns:
/// instance of (<a href="x-source-tag://NetworkManager">NetworkManager</a>)
- (SFMCSdkNetworkManager * _Nonnull)createNetworkManagerWithAuthenticator:(id <SFMCSdkAuthenticator> _Nullable)authenticator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7SFMCSDK13SFMCSdkLogger")
@interface SFMCSdkLogger : NSObject <Logger>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFMCSdkLogger * _Nonnull shared;)
+ (SFMCSdkLogger * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull redactedValues;
- (enum SFMCSdkLogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
- (void)debugWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)warningWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)errorWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (void)faultWithCategory:(enum SFMCSdkLoggerCategory)category message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Behavior notified as the user traverses through the application’s Activities.
/// :nodoc:
SWIFT_CLASS_NAMED("ScreenEntry")
@interface SFMCSdkScreenEntry : SFMCSdkBehavior
@end


/// This class provides helper methods for storage.
SWIFT_CLASS_NAMED("SecurePrefs")
@interface SFMCSdkSecurePrefs : NSObject
/// Stores a String value with the provided key. Key and value are both encrypted.
/// \param value The String value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setString:(NSString * _Nonnull)value for:(NSString * _Nonnull)key;
/// Stores a Int value with the provided key. Key and value are both encrypted.
/// \param value The Int value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setInt:(NSInteger)value for:(NSString * _Nonnull)key;
/// Stores a Bool value with the provided key. Key and value are both encrypted.
/// \param value The Bool value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setBool:(BOOL)value for:(NSString * _Nonnull)key;
/// Sets a Float value in the keychain with the provided key. Key and value are both encrypted.
/// \param value The Float value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setFloat:(float)value for:(NSString * _Nonnull)key;
/// Sets a Double value in the keychain with the provided key. Key and value are both encrypted.
/// \param value The Double value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setDouble:(double)value for:(NSString * _Nonnull)key;
/// Extracts the String value for the provided key in storage
/// \param key The key associated with the value being stored
///
///
/// returns:
/// The string value stored or nil if not present
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes the value associated with the provided key
/// \param key The key for the value to be removed
///
- (void)removeWithKey:(NSString * _Nonnull)key;
/// Clears all data stored in the SecurePrefs Object and makes it a dead object unable to save or extract data. SecurePrefs will have to be re-initialized again.
- (void)clearAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ShareCatalogObjectEvent")
@interface SFMCSdkShareCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ShipOrderEvent")
@interface SFMCSdkShipOrderEvent : SFMCSdkOrderEvent
- (nonnull instancetype)initWithOrder:(SFMCSdkOrder * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
@end


/// This class provides helper for storing encrypted key value pairs.
SWIFT_CLASS_NAMED("StorageManager")
@interface SFMCSdkStorageManager : NSObject
- (NSString * _Nonnull)getRegistrationId SWIFT_WARN_UNUSED_RESULT;
/// Creates a <a href="x-source-tag://SecurePrefs">SecurePrefs</a> object used to store encrypted key value pairs. Using the same name references the same storage location.
/// \code
/// let securePrefs1 = getSecurePrefs(name: "Hello")
/// let securePrefs2 = getSecurePrefs(name: "Hello")
///
/// securePrefs1.setString("first", for: "Key")
/// securePrefs2.setString("second", for: "Key")
///
/// let value = securePrefs1.stringForKey("Key")
/// value now equals "second"
///
/// \endcode\param name location name to store the secure preferences data
///
///
/// returns:
/// A <a href="x-source-tag://SecurePrefs">SecurePrefs</a> object associated with the name provided.
- (SFMCSdkSecurePrefs * _Nonnull)getOrCreateSecurePrefsWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Provides a generated string prefix for a given file
/// \param fileName String name of file to be given a prefix
///
///
/// returns:
/// String result of the file name prefixed with module and unique installation Id
- (NSString * _Nonnull)getFilenameForModuleInstallationWithFileName:(NSString * _Nonnull)fileName SWIFT_WARN_UNUSED_RESULT;
/// Provides a way to set/override the accessibility attribute for Keychain
/// \param accessibleAttribute CFTypeRef which has any one of below values
/// kSecAttrAccessibleWhenUnlocked
/// kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly
/// kSecAttrAccessibleWhenUnlockedThisDeviceOnly
/// kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
/// kSecAttrAccessibleAlwaysThisDeviceOnly
///
+ (void)setKeychainAccessibilityAttributeWithAccessibleAttribute:(CFTypeRef _Nullable)accessibleAttribute;
/// Returns accessible attribute set by the SDK or overridden value by the consuming application
///
/// returns:
/// CFTypeRef which has any one of below values
/// kSecAttrAccessibleWhenUnlocked
/// kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly
/// kSecAttrAccessibleWhenUnlockedThisDeviceOnly
/// kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly
/// kSecAttrAccessibleAlwaysThisDeviceOnly
+ (CFTypeRef _Nullable)keychainAccessibilityAttribute SWIFT_WARN_UNUSED_RESULT;
/// Sets whether or not keychain access errors cause a fatal exception.
/// \param errorsAreFatal Whether keychain access errors should be fatal. 
///
+ (void)setKeychainAccessErrorsAreFatalWithErrorsAreFatal:(BOOL)errorsAreFatal;
///
/// returns:
/// Bool Indicates whether keychain access errors cause a fatal exception.  Default is YES.
+ (BOOL)keychainAccessErrorsAreFatal SWIFT_WARN_UNUSED_RESULT;
/// Provides a way to set/override the  Protection level for File system
/// \param fileProtectionType FileProtectionType which has any one of the below values
/// NSFileProtectionComplete
/// NSFileProtectionCompleteUnlessOpen
/// NSFileProtectionCompleteUntilFirstUserAuthentication
/// NSFileProtectionNone
///
+ (void)setFileSystemProtectionTypeWithFileProtectionType:(NSFileProtectionType _Nullable)fileProtectionType;
/// Returns File protection type set by the SDK or overridden value by the consuming application
///
/// returns:
/// FileProtectionType which has any one of below values
/// NSFileProtectionComplete
/// NSFileProtectionCompleteUnlessOpen
/// NSFileProtectionCompleteUntilFirstUserAuthentication
/// NSFileProtectionNone
+ (NSFileProtectionType _Nullable)fileSystemProtectionType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7SFMCSDK10Subscriber_")
@protocol Subscriber
@property (nonatomic, readonly) enum SFMCSdkModuleName name;
- (void)receiveWithMessage:(SFMCSdkMessage * _Nonnull)message;
@end


SWIFT_CLASS_NAMED("SystemEvent")
@interface SFMCSdkSystemEvent : NSObject <SFMCSdkEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum SFMCSdkEventCategory category;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name attributes:(NSDictionary<NSString *, id> * _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_PROTOCOL_NAMED("URLHandlingDelegate")
@protocol SFMCSdkURLHandlingDelegate
- (void)sfmc_handleURL:(NSURL * _Nonnull)url type:(NSString * _Nonnull)type;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ViewCatalogObjectDetailEvent")
@interface SFMCSdkViewCatalogObjectDetailEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ViewCatalogObjectEvent")
@interface SFMCSdkViewCatalogObjectEvent : SFMCSdkCatalogObjectEvent
- (nonnull instancetype)initWithCatalogObject:(SFMCSdkCatalogObject * _Nonnull)catalogObject OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLRequest;

/// This class is a network request wrapper. Use <a href="x-source-tag://Builder">Builder</a> for request building.
SWIFT_CLASS_NAMED("WrappedRequest")
@interface SFMCSdkWrappedRequest : NSObject
/// Network call request url
@property (nonatomic, copy) NSURLRequest * _Nonnull request;
/// Request name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Request rate limit
@property (nonatomic, readonly) NSTimeInterval rateLimit;
/// Request tag
@property (nonatomic, readonly, copy) NSString * _Nullable tag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This is a helper class for request building.
SWIFT_CLASS_NAMED("Builder")
@interface SFMCSdkWrappedRequestBuilder : NSObject
/// Initializer for the Builder.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the Http method.
/// \param method http method
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)method:(NSString * _Nonnull)method SWIFT_WARN_UNUSED_RESULT;
/// Sets the network call request url.
/// \param url request url
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)url:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Sets the network call request url.
/// \param base base request url
///
/// \param path request url path
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)urlWithBase:(NSString * _Nonnull)base path:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Adds or replaces existing header.
/// \param key header key
///
/// \param value header value
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)addOrReplaceHeaderWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Sets payload of the request.
/// \param body payload
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
/// Sets timeout on the request
/// \param seconds timeout in seconds
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)timeout:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Sets rate limiting on the requet
/// \param seconds rate limiting in seconds
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)rateLimit:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Sets name of the request
/// \param name request name
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)name:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Sets up tag on the request
/// \param tag request tag
///
///
/// returns:
/// self
- (SFMCSdkWrappedRequestBuilder * _Nonnull)tag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Builds request of given parameters.
///
/// returns:
/// <a href="x-source-tag://WrappedRequest">WrappedRequest</a> instance
- (SFMCSdkWrappedRequest * _Nullable)build SWIFT_WARN_UNUSED_RESULT;
@end

@class NSHTTPURLResponse;
@class NSURLResponse;

/// This class is a network response wrapper
SWIFT_CLASS_NAMED("WrappedResponse")
@interface SFMCSdkWrappedResponse : NSObject
/// Response data
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Network Response to an HTTP URL load
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nullable response;
/// Generic error (optional)
@property (nonatomic, readonly) NSError * _Nullable error;
/// Success status based on the response status code (200-299 is considered a successful call)
@property (nonatomic, readonly) BOOL isSuccess;
/// Autorization status based on the response status code (401 is unautorized)
@property (nonatomic, readonly) BOOL isUnauthorized;
/// Time left on the execution timespan of the request
@property (nonatomic, readonly) int64_t timeToExecute;
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nullable)response error:(NSError * _Nullable)error startTimeMillis:(int64_t)startTimeMillis endTimeMillis:(int64_t)endTimeMillis OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
